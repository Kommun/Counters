using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using SQLite;
using Windows.Storage;

namespace Counters.Utils
{
    public class QueryManager
    {
        public const string dbVersion = "2.2";

        private AppSettings _settings = new AppSettings();
        private string _db_path = System.IO.Path.Combine(System.IO.Path.Combine(ApplicationData.Current.LocalFolder.Path, "dbCounters.sqlite"));
        private SQLiteConnection _connection;
        private static readonly QueryManager _instance = new QueryManager();

        /// <summary>
        /// Синглетон
        /// </summary>
        public static QueryManager Instance
        {
            get { return _instance; }
        }

        /// <summary>
        /// Соединение
        /// </summary>
        public SQLiteConnection Connection
        {
            get { return _connection; }
        }

        /// <summary>
        /// Конструктор
        /// </summary>
        protected QueryManager()
        {
            OpenConnection();
        }

        /// <summary>
        /// Открыть соединение
        /// </summary>
        public void OpenConnection()
        {
            _connection = new SQLiteConnection(_db_path);
        }

        /// <summary>
        /// Обновить схему базы данных
        /// </summary>
        /// <returns></returns>
        public bool RefreshDbScheme()
        {
            try
            {
                while (_settings.dbVersionSetting != dbVersion)
                    switch (_settings.dbVersionSetting)
                    {
                        //12.02.2016
                        //case "2.2":
                        //    var query7 = _connection.Query<CounterData>("select * from CounterData");
                        //    _connection.CreateTable<CounterData>();
                        //    foreach (var cd in query7)
                        //    {
                        //        var nextData = query7.FirstOrDefault(c => c.CounterId == cd.CounterId && c.DataId > cd.DataId);
                        //        if (nextData != null)
                        //            cd.NextDataId = nextData.DataId;
                        //        _connection.Update(cd);
                        //    }

                        //    _settings.dbVersionSetting = "2.3";
                        //    break;

                        default:
                            _connection.DropTable<Counter>();
                            _connection.DropTable<CounterData>();
                            _connection.DropTable<Service>();
                            _connection.DropTable<ServiceTarif>();
                            _connection.DropTable<Score>();
                            _connection.DropTable<Notification>();
                            _connection.DropTable<Tarif>();
                            _connection.DropTable<Property>();
                            _connection.DropTable<Flat>();

                            _connection.CreateTable<Counter>();
                            _connection.CreateTable<CounterData>();
                            _connection.CreateTable<Service>();
                            _connection.CreateTable<ServiceTarif>();
                            _connection.CreateTable<Score>();
                            _connection.CreateTable<Notification>();
                            _connection.CreateTable<Tarif>();
                            _connection.CreateTable<Property>();
                            _connection.CreateTable<Flat>();
                            return false;
                    }
            }
            catch
            {
                return false;
            }
            return true;
        }

        #region Counters

        /// <summary>
        /// Получить список счетчиков
        /// </summary>
        /// <param name="lstCounters">Список Id счетчиков</param>
        /// <returns></returns>
        public List<QueryResult> GetCountersByIds(string lstCounters)
        {
            return _connection.Query<QueryResult>(string.Format("select * from Counter where CounterId in ({0})", lstCounters));
        }

        /// <summary>
        /// Получить счетчик с тарифом
        /// </summary>
        /// <param name="id">Id счетчика</param>
        /// <returns></returns>
        public QueryResult GetCounterWithTarif(int id)
        {
            return _connection.Query<QueryResult>("Select * from Counter join Tarif on Counter.TarifId=Tarif.TariffId where Counter.CounterId=?", id).Single();
        }

        /// <summary>
        /// Получить счетчик с показаниями
        /// </summary>
        /// <param name="counterId">Id счетчика</param>
        /// <param name="dataId">Id показаний</param>
        /// <returns></returns>
        public QueryResult GetCounterWithData(int counterId, int dataId)
        {
            if (dataId != 0)
                return _connection.Query<QueryResult>(string.Format("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                    + " join Tarif on CounterData.TariffId=Tarif.TariffId where CounterData.DataId={0}", dataId)).Single();
            else
                return _connection.Query<QueryResult>(string.Format("select * from Counter join Tarif on Counter.TarifId=Tarif.TariffId"
                    + " where Counter.CounterId={0}", counterId)).Single();
        }


        /// <summary>
        /// Получить все показания счетчика
        /// </summary>
        /// <param name="id">Id счетчика</param>
        /// <returns></returns>
        public List<QueryResult> GetCounterDatas(int id)
        {
            return _connection.Query<QueryResult>("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                   + " join Tarif on CounterData.TariffId=Tarif.TariffId where Counter.CounterId=? order by Date", id);
        }

        /// <summary>
        /// Получить предыдущие показания
        /// </summary>
        /// <param name="currentData">Текущие показания</param>
        /// <returns></returns>
        public QueryResult GetPreviousData(QueryResult currentData)
        {
            if (currentData.DataId == 0)
                return GetCountersWithLastData(currentData.CounterId.ToString()).FirstOrDefault();
            else
                return _connection.Query<QueryResult>("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                    + " join Tarif on CounterData.TariffId=Tarif.TariffId where Counter.CounterId=? and Date<? order by Date desc limit 1",
                    currentData.CounterId, currentData.Date).FirstOrDefault();
        }

        /// <summary>
        /// Удалить показания счетчика кроме начальных показаний
        /// </summary>
        /// <param name="counterId">Id счетчика</param>
        /// <param name="firstDataId">Id начальных показаний</param>
        public void DeleteCounterDataButFirst(int counterId, int firstDataId)
        {
            _connection.Execute(string.Format("delete from CounterData where CounterId={0} and DataId<>{1}", counterId, firstDataId));
        }

        /// <summary>
        /// Получить список счетчиков из списка с последними показаниями
        /// </summary>
        /// <returns></returns>
        public List<QueryResult> GetCountersWithLastData(string lstCounters = null)
        {
            return _connection.Query<QueryResult>(string.Format("Select * from (Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                + " join Tarif on CounterData.TariffId=Tarif.TariffId) cd join (SELECT CounterId, MAX(Date) AS MaxDate FROM CounterData"
                + " GROUP BY CounterId) tt on cd.CounterId=tt.CounterId and cd.Date=tt.MaxDate where {0} order by Name",
                lstCounters == null ? "Counter.FlatId=" + _settings.CurrentFlatId : "Counter.CounterId in (" + lstCounters + ")"));
        }

        /// <summary>
        /// Получить список водяных счетчиков
        /// </summary>
        /// <returns></returns>
        public List<Counter> GetWaterCounters()
        {
            return _connection.Query<Counter>(string.Format("select * from Counter where TypeId in (1,2) and FlatId={0} order by Name", _settings.CurrentFlatId));
        }

        /// <summary>
        /// Удалить счетчик
        /// </summary>
        /// <param name="id">Id счетчика</param>
        public void DeleteCounter(int id)
        {
            _connection.Execute("delete from CounterData where CounterId=?", id);
            _connection.Delete<Counter>(id);
        }

        /// <summary>
        /// Данные для экспорта
        /// </summary>
        /// <returns></returns>
        public List<QueryResult> ExportData()
        {
            return _connection.Query<QueryResult>("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                + " join Tarif on CounterData.TariffId=Tarif.TariffId order by Name asc, Date desc");
        }

        /// <summary>
        /// Очистить таблицы счетчиков и показаний
        /// </summary>
        public void ClearCounters()
        {
            _connection.Execute("delete from CounterData");
            _connection.Execute("delete from Counter");
            _connection.Execute("delete from Tarif");
        }

        #endregion

        #region Services

        /// <summary>
        /// Получить список услуг
        /// </summary>
        /// <returns></returns>
        public List<ServiceResult> GetServices(int? id = null)
        {
            return _connection.Query<ServiceResult>(string.Format("select * from Service join ServiceTarif on Service.TarifId=ServiceTarif.TarifId"
                + " where {0} order by Name", id == null ? "Service.FlatId=" + _settings.CurrentFlatId : "Service.ServiceId=" + id));
        }

        /// <summary>
        /// Показания счетчика для расчета стоимости услуги
        /// </summary>
        /// <param name="scoreId">Id счета</param>
        /// <param name="lstCounters">Список счетчиков</param>
        /// <returns></returns>
        public List<QueryResult> ServiceDataSources(int scoreId, string lstCounters)
        {
            if (scoreId == 0)
                return GetCountersWithLastData(lstCounters);
            else
                return _connection.Query<QueryResult>(string.Format("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                    + " where Counter.CounterId in ({0}) and DataId in (select DataId from CounterData where ScoreId={1})", lstCounters, scoreId));
        }

        /// <summary>
        /// Удалить услугу
        /// </summary>
        /// <param name="id">Id услуги</param>
        public void DeleteService(int id)
        {
            _connection.Delete<Service>(id);
            _connection.Execute("delete from ServiceTarif where ServiceId=?", id);
        }

        #endregion

        #region Scores

        /// <summary>
        /// Получить список счетов
        /// </summary>
        /// <returns></returns>
        public List<Score> GetScores()
        {
            return _connection.Query<Score>(string.Format("select * from Score where Score.FlatId={0} order by Date desc", _settings.CurrentFlatId));
        }

        /// <summary>
        /// Получить список показаний счетчика, принадлежащих счету
        /// </summary>
        /// <param name="id">Id счета</param>
        /// <returns></returns>
        public List<QueryResult> GetCounterDataByScoreId(int id)
        {
            if (id != 0)
                return _connection.Query<QueryResult>(string.Format("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId"
                    + " join Tarif on CounterData.TariffId=Tarif.TariffId where ScoreId={0} order by CounterId", id));
            else
                return _connection.Query<QueryResult>(string.Format("select CounterData.*,Counter.*,Tarif.* from Counter left join CounterData on Counter.CounterId=CounterData.CounterId and ScoreId={0}"
                    + " join Tarif on CounterData.TariffId=Tarif.TariffId where Counter.FlatId={1}", id, _settings.CurrentFlatId));
        }

        /// <summary>
        /// Получить список услуг, принадлежащих счету
        /// </summary>
        /// <param name="id">Id счета</param>
        /// <returns></returns>
        public List<ServiceResult> GetServicesByScoreId(int id, string lstServiceTarifs)
        {
            if (id != 0)
                return _connection.Query<ServiceResult>(string.Format("select *,{0} as ScoreId from Service join ServiceTarif on Service.ServiceId=ServiceTarif.ServiceId"
                        + " where ServiceTarif.TarifId in ({1})", id, lstServiceTarifs));
            else
                return _connection.Query<ServiceResult>(string.Format("select *,{0} as ScoreId from Service join ServiceTarif on Service.TarifId=ServiceTarif.TarifId"
                        + " where Service.FlatId={1}", id, _settings.CurrentFlatId));
        }

        /// <summary>
        /// Удалить счет
        /// </summary>
        /// <param name="id">Id счета</param>
        public void DeleteScore(int id)
        {
            _connection.Execute("delete from CounterData where ScoreId=?", id);
            _connection.Delete<Score>(id);
        }

        /// <summary>
        /// Количество источников данных (счетчиков и услуг)
        /// </summary>
        /// <returns></returns>
        public int DataSourcesCount()
        {
            return _connection.ExecuteScalar<int>(string.Format("Select c+s from (select count(*) as c from Counter where FlatId={0}),"
                + " (Select count(*) as s from Service where FlatId={0})", _settings.CurrentFlatId));
        }

        #endregion

        #region Notifications

        /// <summary>
        /// Получить список уведомлений
        /// </summary>
        /// <param name="id">Id уведомления</param>
        /// <returns></returns>
        public List<Notification> GetNotifications(int? id = null)
        {
            return _connection.Query<Notification>("Select * from Notification order by IsRepeatable,Date");
        }

        #endregion

        #region Flats

        /// <summary>
        /// Получить текущую квартиру
        /// </summary>
        /// <returns></returns>
        public Flat GetCurrentFlat()
        {
            var flat = _connection.Query<Flat>("select * From Flat where FlatID=?", _settings.CurrentFlatId).FirstOrDefault();
            if (flat == null)
            {
                flat = _connection.Query<Flat>("select * From Flat").FirstOrDefault();
                _settings.CurrentFlatId = flat.FlatId;
            }
            return flat;
        }

        /// <summary>
        /// Удалить квартиру
        /// </summary>
        /// <param name="id">Id квартиры</param>
        public void DeleteFlat(int id)
        {
            _connection.Delete<Flat>(id);
            _connection.Execute(string.Format("Delete from Counter where FlatId={0}", id));
            _connection.Execute(string.Format("Delete from Service where FlatId={0}", id));
            _connection.Execute(string.Format("Delete from Score where FlatId={0}", id));
        }

        #endregion

        #region Properties

        /// <summary>
        /// Обновить значение свойства
        /// </summary>
        /// <param name="name">Имя</param>
        /// <param name="newValue">Новое значение</param>
        public void UpdatePropertyValue(string name, string newValue)
        {
            _connection.Execute("delete from Property where Name='{0}'", name);
            _connection.Insert(new Property() { Name = name, Value = newValue });
        }

        /// <summary>
        /// Получить значение свойства
        /// </summary>
        /// <param name="name">Имя</param>
        /// <returns></returns>
        public string GetPropertyValue(string name, string defaultValue = null)
        {
            try
            {
                return _connection.Query<Property>("select * from Property where Name=?", name).Single().Value;
            }
            catch { return defaultValue; }
        }

        #endregion

        #region Charts

        /// <summary>
        /// Данные для графика тарифов
        /// </summary>
        /// <param name="counterId">Id счетчика</param>
        /// <param name="beginDate">Начальная дата</param>
        /// <param name="endDate">Конечная дата</param>
        /// <returns></returns>
        public List<QueryResult> TarifsChart(int counterId, string beginDate, string endDate)
        {
            return _connection.Query<QueryResult>(string.Format("select * from CounterData join Tarif on CounterData.TariffId=Tarif.TariffId"
                + " where CounterId={0} and (Date between '{1}' and '{2}') order by Date", counterId, beginDate, endDate));
        }

        /// <summary>
        /// Данные для графика счетов
        /// </summary>
        /// <param name="beginDate">Начальная дата</param>
        /// <param name="endDate">Конечная дата</param>
        /// <returns></returns>
        public List<Score> ScoresChart(string beginDate, string endDate)
        {
            return _connection.Query<Score>(string.Format("select * from Score where Date between '{0}' and '{1}' order by Date", beginDate, endDate));
        }

        /// <summary>
        /// Данные для графика потребления/расходов
        /// </summary>
        /// <param name="counterId">Id счетчика</param>
        /// <param name="beginDate">Начальная дата</param>
        /// <param name="endDate">Конечная дата</param>
        /// <returns></returns>
        public List<QueryResult> CounterDataChart(int counterId, string beginDate, string endDate)
        {
            return _connection.Query<QueryResult>(string.Format("select * from CounterData join Tarif on CounterData.TariffId=Tarif.TariffId"
                  + " where CounterId={0} and (Date between '{1}' and '{2}') order by Date", counterId, beginDate, endDate));
        }

        #endregion

        /// <summary>
        /// Количество записей в таблице
        /// </summary>
        /// <typeparam name="T">Тип таблицы</typeparam>
        /// <returns></returns>
        public int RowsCount<T>()
        {
            return _connection.ExecuteScalar<int>(string.Format("select count(*) from {0}", typeof(T).Name));
        }
    }
}
