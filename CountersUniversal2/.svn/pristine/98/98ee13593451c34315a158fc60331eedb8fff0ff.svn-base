using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.UI.Popups;
using MyToolkit.Messaging;
using System.Threading.Tasks;

namespace Counters
{
    public sealed partial class AddScore : MyToolkit.Paging.MtPage
    {
        int id;
        double Summ;
        bool allowGoBack;
        Score newScore;
        AppSettings settings = new AppSettings();

        public AddScore()
        {
            this.InitializeComponent();
            this.NavigationCacheMode = NavigationCacheMode.Enabled;
        }

        protected async override Task OnNavigatingFromAsync(MyToolkit.Paging.MtNavigatingCancelEventArgs e)
        {
            if (e.NavigationMode == NavigationMode.Back && id == 0 && !allowGoBack)
            {
                MessageDialog msgbox = new MessageDialog("Сохранить счет?");
                msgbox.Commands.Add(new UICommand("Да", null, 0));
                msgbox.Commands.Add(new UICommand("Нет", null, 1));
                msgbox.Commands.Add(new UICommand("Отмена", null, 2));
                var result = await msgbox.ShowAsync();

                switch ((int)result.Id)
                {
                    case 0:
                        if (!await Save())
                            e.Cancel = true;
                        break;
                    case 1:
                        global.db.Rollback();
                        break;
                    case 2:
                        e.Cancel = true;
                        break;
                }
            }
        }

        protected override void OnNavigatedTo(MyToolkit.Paging.MtNavigationEventArgs e)
        {
            try
            {
                id = (int)e.Parameter;
                List<QueryResult> counters;
                List<ServiceResult> services;

                if (id != 0)
                {
                    var currentScore = global.db.Get<Score>(id);
                    tbDate.Date = currentScore.Date;
                    counters = global.db.Query<QueryResult>(string.Format("select * from Counter join CounterData on Counter.CounterId=CounterData.CounterId where ScoreId={0} order by CounterId", id));
                    services = global.db.Query<ServiceResult>(string.Format("select *,{0} as ScoreId from Service join ServiceTarif on Service.ServiceId=ServiceTarif.ServiceId"
                        + " where ServiceTarif.TarifId in ({1})", id, currentScore.lstServiceTarifs));
                    BottomAppBar.Visibility = Visibility.Collapsed;

                    Tag = currentScore.stringDate;
                }
                else
                {
                    //При открытии страницы для создания счета
                    if (e.NavigationMode == NavigationMode.New)
                    {
                        //Начинаем транзакцию
                        global.db.BeginTransaction();
                        newScore = new Score() { FlatId = settings.CurrentFlatId };
                        global.db.Insert(newScore);
                    }

                    counters = global.db.Query<QueryResult>(string.Format("select CounterData.*,Counter.* from Counter left join CounterData on Counter.CounterId=CounterData.CounterId and ScoreId={0}"
                        + " where Counter.FlatId={1} group by Counter.CounterId", newScore.ScoreId, settings.CurrentFlatId));
                    services = global.db.Query<ServiceResult>(string.Format("select *,{0} as ScoreId from Service join ServiceTarif on Service.TarifId=ServiceTarif.TarifId"
                        + " where Service.FlatId={1}", newScore.ScoreId, settings.CurrentFlatId));

                    Tag = "Новый счет";
                }

                lbCounters.ItemsSource = counters.Select(counter => new CheckedItem() { Item = counter, IsChecked = true }).ToList();
                lbServices.ItemsSource = services.Select(service => new CheckedItem() { Item = service, IsChecked = true }).ToList();

                refreshSumm();
            }
            catch
            {
                Frame.GoBackAsync();
            }
        }

        private void refreshSumm()
        {
            var checkedCounters = ((IEnumerable<CheckedItem>)lbCounters.ItemsSource).Where(ci => ci.IsChecked);
            var checkedServices = ((IEnumerable<CheckedItem>)lbServices.ItemsSource).Where(ci => ci.IsChecked);
            grdSumm.Visibility = checkedCounters.Count() + checkedServices.Count() > 0 ? Visibility.Visible : Visibility.Collapsed;
            Summ = checkedCounters.Sum(ci => (ci.Item as QueryResult).Summ + (ci.Item as QueryResult).SummODN) + checkedServices.Sum(ci => (ci.Item as ServiceResult).Summ);
            tbSumm.Text = string.Format("{0} {1}", Summ, settings.Currency);
        }

        private async void btnSave_Click(object sender, RoutedEventArgs e)
        {
            if (await Save())
                await Frame.GoBackAsync();
        }

        private async Task<bool> Save()
        {
            if (((IEnumerable<CheckedItem>)lbCounters.ItemsSource).Count(ci => ci.IsChecked) == 0 && ((IEnumerable<CheckedItem>)lbServices.ItemsSource).Count(ci => ci.IsChecked) == 0)
            {
                await new MessageDialog("Выберите хотя бы один счетчик или услугу").ShowAsync();
                return false;
            }
            else
            {
                newScore.Data = Summ;
                newScore.Date = tbDate.Date.Date;
                newScore.lstServiceTarifs = lstServiceTarifs();
                global.db.Update(newScore);
                //Завершаем транзакцию
                global.db.Commit();
                allowGoBack = true;
                return true;
            }
        }

        private string lstServiceTarifs()
        {
            return String.Join(", ", ((IEnumerable<CheckedItem>)lbServices.ItemsSource).Where(ci => ci.IsChecked).Select(ci => (ci.Item as ServiceResult).TarifId));
        }

        private void grdData_Tapped(object sender, TappedRoutedEventArgs e)
        {
            if (id == 0)
            {
                var selectedItem = (sender as Grid).DataContext as CheckedItem;
                if (selectedItem.Item is QueryResult)
                    Frame.NavigateAsync(typeof(AddData), new AddDataParameter()
                    {
                        CounterId = (selectedItem.Item as QueryResult).CounterId,
                        DataId = (selectedItem.Item as QueryResult).DataId,
                        ScoreId = newScore.ScoreId
                    });
                else
                    Frame.NavigateAsync(typeof(AddService), (selectedItem.Item as ServiceResult).ServiceId);
            }
        }

        private void grdData_RightTapped(object sender, RightTappedRoutedEventArgs e)
        {
            if (id == 0)
            {
                var selectedItem = (sender as Grid).DataContext as CheckedItem;
                selectedItem.IsChecked = !selectedItem.IsChecked;
                refreshSumm();
            }
        }

        private async void btnHelp_Click(object sender, RoutedEventArgs e)
        {
            await new MessageDialog("Каждому счету соответствуют показания счетчиков, добавленные в процессе создания счета. Графа ОДН (общедомовые нужны) заполняется при внесении показаний. Если необходимо, чтобы показания не вошли в счет, нажмите на счетчик правой кнопкой мыши. Редактирование ранее созданных счетов невозможно.").ShowAsync();
        }
    }
}
