using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.UI.Popups;
using MyToolkit.Messaging;
using System.Threading.Tasks;

namespace Counters
{
    public sealed partial class AddScore : MyToolkit.Paging.MtPage
    {
        int id;
        double Summ;
        bool allowGoBack, showEmpty;
        Score currentScore;
        AppSettings settings = new AppSettings();
        List<QueryResult> counters;
        List<CheckedItem> services;

        /// <summary>
        /// Выбранные услуги
        /// </summary>
        public List<ServiceResult> CheckedServices
        {
            get { return services.Where(s => s.IsChecked).Select(s => s.Item as ServiceResult).ToList(); }
        }

        public AddScore()
        {
            this.InitializeComponent();
            this.NavigationCacheMode = NavigationCacheMode.Enabled;
        }

        protected async override Task OnNavigatingFromAsync(MyToolkit.Paging.MtNavigatingCancelEventArgs e)
        {
            if (e.NavigationMode == NavigationMode.Back && id == 0 && !allowGoBack)
            {
                MessageDialog msgbox = new MessageDialog("Сохранить счет?");
                msgbox.Commands.Add(new UICommand("Да", null, 0));
                msgbox.Commands.Add(new UICommand("Нет", null, 1));
                var result = await msgbox.ShowAsync();

                if (result == null)
                    e.Cancel = true;
                else
                    switch ((int)result.Id)
                    {
                        case 0:
                            if (!await Save())
                                e.Cancel = true;
                            break;
                        case 1:
                            App.QueryManager.Connection.Rollback();
                            break;
                    }
            }
        }

        protected override void OnNavigatedTo(MyToolkit.Paging.MtNavigationEventArgs e)
        {
            try
            {
                id = (int)e.Parameter;

                if (id != 0)
                {
                    currentScore = App.QueryManager.Connection.Get<Score>(id);
                    grdDate.Visibility = Visibility.Collapsed;
                    btnSave.Visibility = Visibility.Collapsed;
                    Tag = currentScore.stringDate;
                }
                else
                {
                    showEmpty = true;
                    //При открытии страницы для создания счета
                    if (e.NavigationMode == NavigationMode.New)
                    {
                        //Начинаем транзакцию
                        App.QueryManager.Connection.BeginTransaction();
                        currentScore = new Score() { FlatId = settings.CurrentFlatId };
                        App.QueryManager.Connection.Insert(currentScore);
                    }
                    Tag = "Новый счет";
                }

                counters = App.QueryManager.GetCounterDataByScoreId(currentScore.ScoreId);
                services = App.QueryManager.GetServiceDataByScoreId(currentScore.ScoreId, id == 0).
                    Select(service => new CheckedItem() { Item = service, IsChecked = true }).ToList();

                FilterCounters();
                lbServices.ItemsSource = services;

                btnShowEmpty.Visibility = id != 0 && counters.Count != counters.Where(c => c.DataId != 0).Count() ? Visibility.Visible : Visibility.Collapsed;
            }
            catch
            {
                Frame.GoBackAsync();
            }
        }

        private void refreshSumm()
        {
            grdSumm.Visibility = counters.Count(c => c.DataId != 0) + CheckedServices.Count > 0 ? Visibility.Visible : Visibility.Collapsed;
            Summ = counters.Sum(c => c.Summ + c.SummODN) + CheckedServices.Sum(s => s.Summ);
            tbSumm.Text = string.Format("{0} {1}", Summ, settings.Currency);
        }

        private async void btnSave_Click(object sender, RoutedEventArgs e)
        {
            if (id == 0 && !(await Save()))
                return;

            await Frame.GoBackAsync();
        }

        private async Task<bool> Save()
        {
            if (counters.Count(c => c.DataId != 0) == 0 && CheckedServices.Count == 0)
            {
                await new MessageDialog("Выберите хотя бы один счетчик или услугу").ShowAsync();
                return false;
            }
            else
            {
                currentScore.Date = tbDate.Date.Date;
                foreach (var service in CheckedServices)
                    App.QueryManager.Connection.Insert(new ServiceData
                    {
                        ServiceId = service.ServiceId,
                        TarifId = service.TarifId,
                        ScoreId = currentScore.ScoreId
                    });

                App.QueryManager.Connection.Update(currentScore);
                //Завершаем транзакцию
                App.QueryManager.Connection.Commit();
                allowGoBack = true;
                return true;
            }
        }

        private async void service_Tapped(object sender, TappedRoutedEventArgs e)
        {
            var selectedItem = ((dynamic)sender).DataContext.Item as ServiceResult;
            await Frame.NavigateAsync(typeof(AddService), new AddServiceParameter
            {
                ServiceId = selectedItem.ServiceId,
                DataId = selectedItem.ServiceDataId
            });
        }

        private async void counter_Tapped(object sender, TappedRoutedEventArgs e)
        {
            var selectedItem = (sender as Grid).DataContext as QueryResult;
            await Frame.NavigateAsync(typeof(AddData), new AddDataParameter()
            {
                CounterId = selectedItem.CounterId,
                DataId = selectedItem.DataId,
                ScoreId = currentScore.ScoreId
            });
        }

        private void service_RightTapped(object sender, RightTappedRoutedEventArgs e)
        {
            if (id == 0)
            {
                var selectedItem = (sender as Grid).DataContext as CheckedItem;
                selectedItem.IsChecked = !selectedItem.IsChecked;
                refreshSumm();
            }
        }

        private async void btnHelp_Click(object sender, RoutedEventArgs e)
        {
            await new MessageDialog("Каждому счету соответствуют показания счетчиков, добавленные в процессе создания счета."
                + " В дальнейшем можно редактировать прикрепленные к счету показания и добавлять показания счетчиков,"
                + " которые были пропущены при создании счета. Для этого необходимо в режиме редактирования счета нажать на кнопку 'Показать пустые'."
                + " Если необходимо, чтобы услуга не вошла в счет, нажмите на нее и дождитесь, когда она станет неактивной.").ShowAsync();
        }

        private void btnShowEmpty_Click(object sender, RoutedEventArgs e)
        {
            showEmpty = !showEmpty;
            FilterCounters();
        }

        private void FilterCounters()
        {
            lbCounters.ItemsSource = showEmpty ? counters : counters.Where(c => c.DataId != 0);
        }
    }
}
