//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Counters
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Counters.Counters8_1_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Counters.Counters8_1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Counters.Counters8_1_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[72];
            _typeNameTable[0] = "MyToolkit.Paging.MtPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.AppBar";
            _typeNameTable[3] = "MyToolkit.Paging.Animations.IPageAnimation";
            _typeNameTable[4] = "MyToolkit.Paging.MtFrame";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "Windows.UI.Xaml.Navigation.NavigationCacheMode";
            _typeNameTable[9] = "Boolean";
            _typeNameTable[10] = "Counters.About";
            _typeNameTable[11] = "Counters.AppSettings";
            _typeNameTable[12] = "Object";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "String";
            _typeNameTable[15] = "Counters.ExportSettings";
            _typeNameTable[16] = "Counters.ChartSettings";
            _typeNameTable[17] = "Counters.AddFlat";
            _typeNameTable[18] = "Counters.Flats";
            _typeNameTable[19] = "Counters.BooleanToVisibilityConverter";
            _typeNameTable[20] = "Counters.TypeItems";
            _typeNameTable[21] = "System.Collections.Generic.List`1<Counters.QueryResult>";
            _typeNameTable[22] = "Counters.QueryResult";
            _typeNameTable[23] = "Double";
            _typeNameTable[24] = "System.DateTime";
            _typeNameTable[25] = "System.ValueType";
            _typeNameTable[26] = "Counters.AddCounter";
            _typeNameTable[27] = "Counters.AddData";
            _typeNameTable[28] = "Counters.AddNotification";
            _typeNameTable[29] = "Counters.AddScore";
            _typeNameTable[30] = "System.Collections.Generic.List`1<Counters.ServiceResult>";
            _typeNameTable[31] = "Counters.ServiceResult";
            _typeNameTable[32] = "Counters.MenuItems";
            _typeNameTable[33] = "System.Collections.Generic.List`1<Counters.MenuItem>";
            _typeNameTable[34] = "Counters.MenuItem";
            _typeNameTable[35] = "Counters.AddService";
            _typeNameTable[36] = "Counters.Charts";
            _typeNameTable[37] = "Counters.Counters";
            _typeNameTable[38] = "Counters.Export";
            _typeNameTable[39] = "Counters.BooleanToOpacityConverter";
            _typeNameTable[40] = "Counters.Notifications";
            _typeNameTable[41] = "Counters.Scores";
            _typeNameTable[42] = "Counters.Services";
            _typeNameTable[43] = "Counters.MainMenuItems";
            _typeNameTable[44] = "System.Collections.Generic.List`1<Counters.MainMenuItem>";
            _typeNameTable[45] = "Counters.MainMenuItem";
            _typeNameTable[46] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[47] = "Counters.Settings";
            _typeNameTable[48] = "Counters.InverseBooleanConverter";
            _typeNameTable[49] = "DrawerLayout.DrawerLayout";
            _typeNameTable[50] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[51] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[52] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[53] = "Windows.UI.Xaml.Media.Animation.TransitionCollection";
            _typeNameTable[54] = "System.Windows.Input.ICommand";
            _typeNameTable[55] = "MyToolkit.Paging.MtPageDescription";
            _typeNameTable[56] = "System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>";
            _typeNameTable[57] = "Counters.MainPage";
            _typeNameTable[58] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[59] = "OxyPlot.Windows.PlotView";
            _typeNameTable[60] = "OxyPlot.IPlotController";
            _typeNameTable[61] = "Windows.UI.Xaml.Controls.ControlTemplate";
            _typeNameTable[62] = "OxyPlot.PlotModel";
            _typeNameTable[63] = "OxyPlot.Model";
            _typeNameTable[64] = "System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>";
            _typeNameTable[65] = "System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>";
            _typeNameTable[66] = "OxyPlot.Windows.TrackerDefinition";
            _typeNameTable[67] = "OxyPlot.OxyRect";
            _typeNameTable[68] = "Counters.Chart";
            _typeNameTable[69] = "Counters.Data";
            _typeNameTable[70] = "Counters.ExportSend";
            _typeNameTable[71] = "Counters.Help";

            _typeTable = new global::System.Type[72];
            _typeTable[0] = typeof(global::MyToolkit.Paging.MtPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.AppBar);
            _typeTable[3] = typeof(global::MyToolkit.Paging.Animations.IPageAnimation);
            _typeTable[4] = typeof(global::MyToolkit.Paging.MtFrame);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Navigation.NavigationCacheMode);
            _typeTable[9] = typeof(global::System.Boolean);
            _typeTable[10] = typeof(global::Counters.About);
            _typeTable[11] = typeof(global::Counters.AppSettings);
            _typeTable[12] = typeof(global::System.Object);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::System.String);
            _typeTable[15] = typeof(global::Counters.ExportSettings);
            _typeTable[16] = typeof(global::Counters.ChartSettings);
            _typeTable[17] = typeof(global::Counters.AddFlat);
            _typeTable[18] = typeof(global::Counters.Flats);
            _typeTable[19] = typeof(global::Counters.BooleanToVisibilityConverter);
            _typeTable[20] = typeof(global::Counters.TypeItems);
            _typeTable[21] = typeof(global::System.Collections.Generic.List<global::Counters.QueryResult>);
            _typeTable[22] = typeof(global::Counters.QueryResult);
            _typeTable[23] = typeof(global::System.Double);
            _typeTable[24] = typeof(global::System.DateTime);
            _typeTable[25] = typeof(global::System.ValueType);
            _typeTable[26] = typeof(global::Counters.AddCounter);
            _typeTable[27] = typeof(global::Counters.AddData);
            _typeTable[28] = typeof(global::Counters.AddNotification);
            _typeTable[29] = typeof(global::Counters.AddScore);
            _typeTable[30] = typeof(global::System.Collections.Generic.List<global::Counters.ServiceResult>);
            _typeTable[31] = typeof(global::Counters.ServiceResult);
            _typeTable[32] = typeof(global::Counters.MenuItems);
            _typeTable[33] = typeof(global::System.Collections.Generic.List<global::Counters.MenuItem>);
            _typeTable[34] = typeof(global::Counters.MenuItem);
            _typeTable[35] = typeof(global::Counters.AddService);
            _typeTable[36] = typeof(global::Counters.Charts);
            _typeTable[37] = typeof(global::Counters.Counters);
            _typeTable[38] = typeof(global::Counters.Export);
            _typeTable[39] = typeof(global::Counters.BooleanToOpacityConverter);
            _typeTable[40] = typeof(global::Counters.Notifications);
            _typeTable[41] = typeof(global::Counters.Scores);
            _typeTable[42] = typeof(global::Counters.Services);
            _typeTable[43] = typeof(global::Counters.MainMenuItems);
            _typeTable[44] = typeof(global::System.Collections.Generic.List<global::Counters.MainMenuItem>);
            _typeTable[45] = typeof(global::Counters.MainMenuItem);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[47] = typeof(global::Counters.Settings);
            _typeTable[48] = typeof(global::Counters.InverseBooleanConverter);
            _typeTable[49] = typeof(global::DrawerLayout.DrawerLayout);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[52] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.Media.Animation.TransitionCollection);
            _typeTable[54] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[55] = typeof(global::MyToolkit.Paging.MtPageDescription);
            _typeTable[56] = typeof(global::System.Collections.Generic.IReadOnlyList<global::MyToolkit.Paging.MtPageDescription>);
            _typeTable[57] = typeof(global::Counters.MainPage);
            _typeTable[58] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[59] = typeof(global::OxyPlot.Windows.PlotView);
            _typeTable[60] = typeof(global::OxyPlot.IPlotController);
            _typeTable[61] = typeof(global::Windows.UI.Xaml.Controls.ControlTemplate);
            _typeTable[62] = typeof(global::OxyPlot.PlotModel);
            _typeTable[63] = typeof(global::OxyPlot.Model);
            _typeTable[64] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::OxyPlot.Windows.TrackerDefinition>);
            _typeTable[65] = typeof(global::System.Collections.ObjectModel.Collection<global::OxyPlot.Windows.TrackerDefinition>);
            _typeTable[66] = typeof(global::OxyPlot.Windows.TrackerDefinition);
            _typeTable[67] = typeof(global::OxyPlot.OxyRect);
            _typeTable[68] = typeof(global::Counters.Chart);
            _typeTable[69] = typeof(global::Counters.Data);
            _typeTable[70] = typeof(global::Counters.ExportSend);
            _typeTable[71] = typeof(global::Counters.Help);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MtPage() { return new global::MyToolkit.Paging.MtPage(); }
        private object Activate_4_MtFrame() { return new global::MyToolkit.Paging.MtFrame(); }
        private object Activate_10_About() { return new global::Counters.About(); }
        private object Activate_11_AppSettings() { return new global::Counters.AppSettings(); }
        private object Activate_15_ExportSettings() { return new global::Counters.ExportSettings(); }
        private object Activate_16_ChartSettings() { return new global::Counters.ChartSettings(); }
        private object Activate_17_AddFlat() { return new global::Counters.AddFlat(); }
        private object Activate_18_Flats() { return new global::Counters.Flats(); }
        private object Activate_19_BooleanToVisibilityConverter() { return new global::Counters.BooleanToVisibilityConverter(); }
        private object Activate_20_TypeItems() { return new global::Counters.TypeItems(); }
        private object Activate_21_List() { return new global::System.Collections.Generic.List<global::Counters.QueryResult>(); }
        private object Activate_22_QueryResult() { return new global::Counters.QueryResult(); }
        private object Activate_26_AddCounter() { return new global::Counters.AddCounter(); }
        private object Activate_27_AddData() { return new global::Counters.AddData(); }
        private object Activate_28_AddNotification() { return new global::Counters.AddNotification(); }
        private object Activate_29_AddScore() { return new global::Counters.AddScore(); }
        private object Activate_30_List() { return new global::System.Collections.Generic.List<global::Counters.ServiceResult>(); }
        private object Activate_31_ServiceResult() { return new global::Counters.ServiceResult(); }
        private object Activate_32_MenuItems() { return new global::Counters.MenuItems(); }
        private object Activate_33_List() { return new global::System.Collections.Generic.List<global::Counters.MenuItem>(); }
        private object Activate_34_MenuItem() { return new global::Counters.MenuItem(); }
        private object Activate_35_AddService() { return new global::Counters.AddService(); }
        private object Activate_36_Charts() { return new global::Counters.Charts(); }
        private object Activate_37_Counters() { return new global::Counters.Counters(); }
        private object Activate_38_Export() { return new global::Counters.Export(); }
        private object Activate_39_BooleanToOpacityConverter() { return new global::Counters.BooleanToOpacityConverter(); }
        private object Activate_40_Notifications() { return new global::Counters.Notifications(); }
        private object Activate_41_Scores() { return new global::Counters.Scores(); }
        private object Activate_42_Services() { return new global::Counters.Services(); }
        private object Activate_43_MainMenuItems() { return new global::Counters.MainMenuItems(); }
        private object Activate_44_List() { return new global::System.Collections.Generic.List<global::Counters.MainMenuItem>(); }
        private object Activate_45_MainMenuItem() { return new global::Counters.MainMenuItem(); }
        private object Activate_47_Settings() { return new global::Counters.Settings(); }
        private object Activate_48_InverseBooleanConverter() { return new global::Counters.InverseBooleanConverter(); }
        private object Activate_49_DrawerLayout() { return new global::DrawerLayout.DrawerLayout(); }
        private object Activate_57_MainPage() { return new global::Counters.MainPage(); }
        private object Activate_59_PlotView() { return new global::OxyPlot.Windows.PlotView(); }
        private object Activate_62_PlotModel() { return new global::OxyPlot.PlotModel(); }
        private object Activate_64_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::OxyPlot.Windows.TrackerDefinition>(); }
        private object Activate_65_Collection() { return new global::System.Collections.ObjectModel.Collection<global::OxyPlot.Windows.TrackerDefinition>(); }
        private object Activate_66_TrackerDefinition() { return new global::OxyPlot.Windows.TrackerDefinition(); }
        private object Activate_68_Chart() { return new global::Counters.Chart(); }
        private object Activate_69_Data() { return new global::Counters.Data(); }
        private object Activate_70_ExportSend() { return new global::Counters.ExportSend(); }
        private object Activate_71_Help() { return new global::Counters.Help(); }
        private void VectorAdd_20_TypeItems(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.QueryResult>)instance;
            var newItem = (global::Counters.QueryResult)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.QueryResult>)instance;
            var newItem = (global::Counters.QueryResult)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.ServiceResult>)instance;
            var newItem = (global::Counters.ServiceResult)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_MenuItems(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.MenuItem>)instance;
            var newItem = (global::Counters.MenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.MenuItem>)instance;
            var newItem = (global::Counters.MenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_MainMenuItems(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.MainMenuItem>)instance;
            var newItem = (global::Counters.MainMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Counters.MainMenuItem>)instance;
            var newItem = (global::Counters.MainMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_64_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OxyPlot.Windows.TrackerDefinition>)instance;
            var newItem = (global::OxyPlot.Windows.TrackerDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_65_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::OxyPlot.Windows.TrackerDefinition>)instance;
            var newItem = (global::OxyPlot.Windows.TrackerDefinition)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Counters.Counters8_1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyToolkit.Paging.MtPage
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_0_MtPage;
                userType.AddMemberName("BottomAppBar");
                userType.AddMemberName("PageAnimation");
                userType.AddMemberName("Frame");
                userType.AddMemberName("AnimationContext");
                userType.AddMemberName("ActualAnimationContext");
                userType.AddMemberName("InternalPage");
                userType.AddMemberName("NavigationCacheMode");
                userType.AddMemberName("TopAppBar");
                userType.AddMemberName("IsSuspendable");
                userType.AddMemberName("UsePointerButtonsToNavigate");
                userType.AddMemberName("UseAltLeftOrRightToNavigate");
                userType.AddMemberName("UseBackKeyToNavigate");
                userType.AddMemberName("UseBackKeyToNavigateInWebView");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.AppBar
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  MyToolkit.Paging.Animations.IPageAnimation
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  MyToolkit.Paging.MtFrame
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_MtFrame;
                userType.AddMemberName("ShowNavigationOnAppInAndOut");
                userType.AddMemberName("DisableForwardStack");
                userType.AddMemberName("DisableCache");
                userType.AddMemberName("InternalFrame");
                userType.AddMemberName("Content");
                userType.AddMemberName("ContentTransitions");
                userType.AddMemberName("GoBackCommand");
                userType.AddMemberName("IsFirstPage");
                userType.AddMemberName("PreviousPage");
                userType.AddMemberName("CurrentPage");
                userType.AddMemberName("NextPage");
                userType.AddMemberName("CanGoBack");
                userType.AddMemberName("CanGoForward");
                userType.AddMemberName("Pages");
                userType.AddMemberName("BackStackDepth");
                userType.AddMemberName("PageAnimation");
                userType.AddMemberName("IsNavigating");
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.Navigation.NavigationCacheMode
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Boolean
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Counters.About
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_10_About;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Counters.AppSettings
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_AppSettings;
                userType.AddMemberName("isFirstLaunchSetting");
                userType.AddMemberName("Runs");
                userType.AddMemberName("NotRated");
                userType.AddMemberName("IsFullVersion");
                userType.AddMemberName("Currency");
                userType.AddMemberName("AllowOrientation");
                userType.AddMemberName("isRememberOn");
                userType.AddMemberName("DefaultPageType");
                userType.AddMemberName("isFirstMessageSetting");
                userType.AddMemberName("emailSetting");
                userType.AddMemberName("mailTitleSetting");
                userType.AddMemberName("phoneSetting");
                userType.AddMemberName("AddData");
                userType.AddMemberName("AddSumm");
                userType.AddMemberName("AddServices");
                userType.AddMemberName("dbVersionSetting");
                userType.AddMemberName("LastBackupDate");
                userType.AddMemberName("SaveBackupOnExit");
                userType.AddMemberName("NeedToSaveBackup");
                userType.AddMemberName("notificationCountSetting");
                userType.AddMemberName("PlotType");
                userType.AddMemberName("CurrentFlatId");
                userType.AddMemberName("AppVersion");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Object
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Int32
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  String
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Counters.ExportSettings
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_15_ExportSettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Counters.ChartSettings
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_16_ChartSettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Counters.AddFlat
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_17_AddFlat;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Counters.Flats
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_18_Flats;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Counters.BooleanToVisibilityConverter
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_BooleanToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Counters.TypeItems
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<Counters.QueryResult>"));
                userType.Activator = Activate_20_TypeItems;
                userType.CollectionAdd = VectorAdd_20_TypeItems;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  System.Collections.Generic.List`1<Counters.QueryResult>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_List;
                userType.CollectionAdd = VectorAdd_21_List;
                userType.AddMemberName("Capacity");
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 22:   //  Counters.QueryResult
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_QueryResult;
                userType.AddMemberName("TypeId");
                userType.AddMemberName("CounterId");
                userType.AddMemberName("Name");
                userType.AddMemberName("EnableODN");
                userType.AddMemberName("CounterType");
                userType.AddMemberName("Icon");
                userType.AddMemberName("IconColor");
                userType.AddMemberName("Unit");
                userType.AddMemberName("DataId");
                userType.AddMemberName("NextDataId");
                userType.AddMemberName("Data");
                userType.AddMemberName("DataODN");
                userType.AddMemberName("Date");
                userType.AddMemberName("SummODN");
                userType.AddMemberName("stringSumm");
                userType.AddMemberName("ScoreId");
                userType.AddMemberName("IsFirst");
                userType.AddMemberName("Delta");
                userType.AddMemberName("Summ");
                userType.AddMemberName("PreviousData");
                userType.AddMemberName("stringSummODN");
                userType.AddMemberName("stringFullSumm");
                userType.AddMemberName("stringDetailSumm");
                userType.AddMemberName("stringDate");
                userType.AddMemberName("stringData");
                userType.AddMemberName("stringDataWithDelta");
                userType.AddMemberName("TariffId");
                userType.AddMemberName("TarifsCount");
                userType.AddMemberName("Tarif1");
                userType.AddMemberName("Limit1");
                userType.AddMemberName("Tarif2");
                userType.AddMemberName("Limit2");
                userType.AddMemberName("Tarif3");
                userType.AddMemberName("stringTariff");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Double
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.DateTime
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.ValueType
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  Counters.AddCounter
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_26_AddCounter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Counters.AddData
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_27_AddData;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Counters.AddNotification
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_28_AddNotification;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Counters.AddScore
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_29_AddScore;
                userType.AddMemberName("CheckedServices");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  System.Collections.Generic.List`1<Counters.ServiceResult>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_30_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Counters.ServiceResult
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_ServiceResult;
                userType.AddMemberName("ServiceId");
                userType.AddMemberName("Name");
                userType.AddMemberName("Data");
                userType.AddMemberName("lstCounters");
                userType.AddMemberName("Type");
                userType.AddMemberName("Icon");
                userType.AddMemberName("IconColor");
                userType.AddMemberName("Summ");
                userType.AddMemberName("stringSumm");
                userType.AddMemberName("ServiceDataId");
                userType.AddMemberName("ScoreId");
                userType.AddMemberName("TarifId");
                userType.AddMemberName("Tarif");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Counters.MenuItems
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MenuItem>"));
                userType.Activator = Activate_32_MenuItems;
                userType.CollectionAdd = VectorAdd_32_MenuItems;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.Generic.List`1<Counters.MenuItem>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_List;
                userType.CollectionAdd = VectorAdd_33_List;
                userType.AddMemberName("Capacity");
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 34:   //  Counters.MenuItem
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_MenuItem;
                userType.AddMemberName("Description");
                userType.AddMemberName("Title");
                userType.AddMemberName("Type");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Counters.AddService
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_35_AddService;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Counters.Charts
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_36_Charts;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Counters.Counters
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_37_Counters;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Counters.Export
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_38_Export;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Counters.BooleanToOpacityConverter
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_BooleanToOpacityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Counters.Notifications
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_40_Notifications;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Counters.Scores
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_41_Scores;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Counters.Services
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_42_Services;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Counters.MainMenuItems
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MainMenuItem>"));
                userType.Activator = Activate_43_MainMenuItems;
                userType.CollectionAdd = VectorAdd_43_MainMenuItems;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.Generic.List`1<Counters.MainMenuItem>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_List;
                userType.CollectionAdd = VectorAdd_44_List;
                userType.AddMemberName("Capacity");
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 45:   //  Counters.MainMenuItem
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_45_MainMenuItem;
                userType.AddMemberName("ImgSource");
                userType.AddMemberName("Title");
                userType.AddMemberName("Page");
                userType.AddMemberName("Message");
                userType.AddMemberName("Background");
                userType.AddMemberName("IsLocked");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Counters.Settings
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_47_Settings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Counters.InverseBooleanConverter
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_48_InverseBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  DrawerLayout.DrawerLayout
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_49_DrawerLayout;
                userType.AddMemberName("IsDrawerVisible");
                userType.AddMemberName("IsDrawerOpen");
                xamlType = userType;
                break;

            case 50:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Windows.UI.Xaml.Media.Animation.TransitionCollection
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  System.Windows.Input.ICommand
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  MyToolkit.Paging.MtPageDescription
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 57:   //  Counters.MainPage
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_57_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  OxyPlot.Windows.PlotView
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_59_PlotView;
                userType.AddMemberName("Controller");
                userType.AddMemberName("DefaultTrackerTemplate");
                userType.AddMemberName("HandleRightClicks");
                userType.AddMemberName("IsMouseWheelEnabled");
                userType.AddMemberName("Model");
                userType.AddMemberName("ZoomRectangleTemplate");
                userType.AddMemberName("TrackerDefinitions");
                userType.AddMemberName("ActualModel");
                userType.AddMemberName("ClientArea");
                userType.AddMemberName("ActualController");
                xamlType = userType;
                break;

            case 60:   //  OxyPlot.IPlotController
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Xaml.Controls.ControlTemplate
                xamlType = new global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  OxyPlot.PlotModel
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("OxyPlot.Model"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  OxyPlot.Model
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 64:   //  System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>"));
                userType.CollectionAdd = VectorAdd_64_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  System.Collections.ObjectModel.Collection`1<OxyPlot.Windows.TrackerDefinition>
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_65_Collection;
                userType.CollectionAdd = VectorAdd_65_Collection;
                xamlType = userType;
                break;

            case 66:   //  OxyPlot.Windows.TrackerDefinition
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_66_TrackerDefinition;
                userType.AddMemberName("TrackerKey");
                userType.AddMemberName("TrackerTemplate");
                xamlType = userType;
                break;

            case 67:   //  OxyPlot.OxyRect
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  Counters.Chart
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_68_Chart;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  Counters.Data
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_69_Data;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  Counters.ExportSend
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_70_ExportSend;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  Counters.Help
                userType = new global::Counters.Counters8_1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Paging.MtPage"));
                userType.Activator = Activate_71_Help;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::MyToolkit.MyToolkit_Extended_WinRT_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::OxyPlot.Windows.OxyPlot_Windows_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_MtPage_BottomAppBar(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.BottomAppBar;
        }
        private void set_0_MtPage_BottomAppBar(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.BottomAppBar = (global::Windows.UI.Xaml.Controls.AppBar)Value;
        }
        private object get_1_MtPage_PageAnimation(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.PageAnimation;
        }
        private void set_1_MtPage_PageAnimation(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.PageAnimation = (global::MyToolkit.Paging.Animations.IPageAnimation)Value;
        }
        private object get_2_MtPage_Frame(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.Frame;
        }
        private object get_3_MtPage_AnimationContext(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.AnimationContext;
        }
        private void set_3_MtPage_AnimationContext(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.AnimationContext = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_4_MtPage_ActualAnimationContext(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.ActualAnimationContext;
        }
        private object get_5_MtPage_InternalPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.InternalPage;
        }
        private object get_6_MtPage_NavigationCacheMode(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.NavigationCacheMode;
        }
        private void set_6_MtPage_NavigationCacheMode(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.NavigationCacheMode = (global::Windows.UI.Xaml.Navigation.NavigationCacheMode)Value;
        }
        private object get_7_MtPage_TopAppBar(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.TopAppBar;
        }
        private void set_7_MtPage_TopAppBar(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.TopAppBar = (global::Windows.UI.Xaml.Controls.AppBar)Value;
        }
        private object get_8_MtPage_IsSuspendable(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.IsSuspendable;
        }
        private object get_9_MtPage_UsePointerButtonsToNavigate(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.UsePointerButtonsToNavigate;
        }
        private void set_9_MtPage_UsePointerButtonsToNavigate(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.UsePointerButtonsToNavigate = (global::System.Boolean)Value;
        }
        private object get_10_MtPage_UseAltLeftOrRightToNavigate(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.UseAltLeftOrRightToNavigate;
        }
        private void set_10_MtPage_UseAltLeftOrRightToNavigate(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.UseAltLeftOrRightToNavigate = (global::System.Boolean)Value;
        }
        private object get_11_MtPage_UseBackKeyToNavigate(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.UseBackKeyToNavigate;
        }
        private void set_11_MtPage_UseBackKeyToNavigate(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.UseBackKeyToNavigate = (global::System.Boolean)Value;
        }
        private object get_12_MtPage_UseBackKeyToNavigateInWebView(object instance)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            return that.UseBackKeyToNavigateInWebView;
        }
        private void set_12_MtPage_UseBackKeyToNavigateInWebView(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtPage)instance;
            that.UseBackKeyToNavigateInWebView = (global::System.Boolean)Value;
        }
        private object get_13_AppSettings_isFirstLaunchSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.isFirstLaunchSetting;
        }
        private void set_13_AppSettings_isFirstLaunchSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.isFirstLaunchSetting = (global::System.Boolean)Value;
        }
        private object get_14_AppSettings_Runs(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.Runs;
        }
        private void set_14_AppSettings_Runs(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.Runs = (global::System.Int32)Value;
        }
        private object get_15_AppSettings_NotRated(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.NotRated;
        }
        private void set_15_AppSettings_NotRated(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.NotRated = (global::System.Boolean)Value;
        }
        private object get_16_AppSettings_IsFullVersion(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.IsFullVersion;
        }
        private void set_16_AppSettings_IsFullVersion(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.IsFullVersion = (global::System.Boolean)Value;
        }
        private object get_17_AppSettings_Currency(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.Currency;
        }
        private void set_17_AppSettings_Currency(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.Currency = (global::System.String)Value;
        }
        private object get_18_AppSettings_AllowOrientation(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.AllowOrientation;
        }
        private void set_18_AppSettings_AllowOrientation(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.AllowOrientation = (global::System.Boolean)Value;
        }
        private object get_19_AppSettings_isRememberOn(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.isRememberOn;
        }
        private void set_19_AppSettings_isRememberOn(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.isRememberOn = (global::System.Boolean)Value;
        }
        private object get_20_AppSettings_DefaultPageType(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.DefaultPageType;
        }
        private void set_20_AppSettings_DefaultPageType(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.DefaultPageType = (global::System.String)Value;
        }
        private object get_21_AppSettings_isFirstMessageSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.isFirstMessageSetting;
        }
        private void set_21_AppSettings_isFirstMessageSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.isFirstMessageSetting = (global::System.Boolean)Value;
        }
        private object get_22_AppSettings_emailSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.emailSetting;
        }
        private void set_22_AppSettings_emailSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.emailSetting = (global::System.String)Value;
        }
        private object get_23_AppSettings_mailTitleSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.mailTitleSetting;
        }
        private void set_23_AppSettings_mailTitleSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.mailTitleSetting = (global::System.String)Value;
        }
        private object get_24_AppSettings_phoneSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.phoneSetting;
        }
        private void set_24_AppSettings_phoneSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.phoneSetting = (global::System.String)Value;
        }
        private object get_25_AppSettings_AddData(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.AddData;
        }
        private void set_25_AppSettings_AddData(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.AddData = (global::System.Boolean)Value;
        }
        private object get_26_AppSettings_AddSumm(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.AddSumm;
        }
        private void set_26_AppSettings_AddSumm(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.AddSumm = (global::System.Boolean)Value;
        }
        private object get_27_AppSettings_AddServices(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.AddServices;
        }
        private void set_27_AppSettings_AddServices(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.AddServices = (global::System.Boolean)Value;
        }
        private object get_28_AppSettings_dbVersionSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.dbVersionSetting;
        }
        private void set_28_AppSettings_dbVersionSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.dbVersionSetting = (global::System.String)Value;
        }
        private object get_29_AppSettings_LastBackupDate(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.LastBackupDate;
        }
        private void set_29_AppSettings_LastBackupDate(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.LastBackupDate = (global::System.String)Value;
        }
        private object get_30_AppSettings_SaveBackupOnExit(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.SaveBackupOnExit;
        }
        private void set_30_AppSettings_SaveBackupOnExit(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.SaveBackupOnExit = (global::System.Boolean)Value;
        }
        private object get_31_AppSettings_NeedToSaveBackup(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.NeedToSaveBackup;
        }
        private void set_31_AppSettings_NeedToSaveBackup(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.NeedToSaveBackup = (global::System.Boolean)Value;
        }
        private object get_32_AppSettings_notificationCountSetting(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.notificationCountSetting;
        }
        private void set_32_AppSettings_notificationCountSetting(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.notificationCountSetting = (global::System.Int32)Value;
        }
        private object get_33_AppSettings_PlotType(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.PlotType;
        }
        private void set_33_AppSettings_PlotType(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.PlotType = (global::System.Int32)Value;
        }
        private object get_34_AppSettings_CurrentFlatId(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.CurrentFlatId;
        }
        private void set_34_AppSettings_CurrentFlatId(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.CurrentFlatId = (global::System.Int32)Value;
        }
        private object get_35_AppSettings_AppVersion(object instance)
        {
            var that = (global::Counters.AppSettings)instance;
            return that.AppVersion;
        }
        private void set_35_AppSettings_AppVersion(object instance, object Value)
        {
            var that = (global::Counters.AppSettings)instance;
            that.AppVersion = (global::System.Int32)Value;
        }
        private object get_36_QueryResult_TypeId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.TypeId;
        }
        private void set_36_QueryResult_TypeId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.TypeId = (global::System.Int32)Value;
        }
        private object get_37_QueryResult_CounterId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.CounterId;
        }
        private void set_37_QueryResult_CounterId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.CounterId = (global::System.Int32)Value;
        }
        private object get_38_QueryResult_Name(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Name;
        }
        private void set_38_QueryResult_Name(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_39_QueryResult_EnableODN(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.EnableODN;
        }
        private void set_39_QueryResult_EnableODN(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.EnableODN = (global::System.Boolean)Value;
        }
        private object get_40_QueryResult_CounterType(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.CounterType;
        }
        private object get_41_QueryResult_Icon(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Icon;
        }
        private object get_42_QueryResult_IconColor(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.IconColor;
        }
        private object get_43_QueryResult_Unit(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Unit;
        }
        private object get_44_QueryResult_DataId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.DataId;
        }
        private void set_44_QueryResult_DataId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.DataId = (global::System.Int32)Value;
        }
        private object get_45_QueryResult_NextDataId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.NextDataId;
        }
        private void set_45_QueryResult_NextDataId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.NextDataId = (global::System.Int32)Value;
        }
        private object get_46_QueryResult_Data(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Data;
        }
        private void set_46_QueryResult_Data(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Data = (global::System.Double)Value;
        }
        private object get_47_QueryResult_DataODN(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.DataODN;
        }
        private void set_47_QueryResult_DataODN(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.DataODN = (global::System.Double)Value;
        }
        private object get_48_QueryResult_Date(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Date;
        }
        private void set_48_QueryResult_Date(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Date = (global::System.DateTime)Value;
        }
        private object get_49_QueryResult_SummODN(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.SummODN;
        }
        private void set_49_QueryResult_SummODN(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.SummODN = (global::System.Double)Value;
        }
        private object get_50_QueryResult_stringSumm(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringSumm;
        }
        private void set_50_QueryResult_stringSumm(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.stringSumm = (global::System.String)Value;
        }
        private object get_51_QueryResult_ScoreId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.ScoreId;
        }
        private void set_51_QueryResult_ScoreId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.ScoreId = (global::System.Int32)Value;
        }
        private object get_52_QueryResult_IsFirst(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.IsFirst;
        }
        private void set_52_QueryResult_IsFirst(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.IsFirst = (global::System.Boolean)Value;
        }
        private object get_53_QueryResult_Delta(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Delta;
        }
        private object get_54_QueryResult_Summ(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Summ;
        }
        private object get_55_QueryResult_PreviousData(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.PreviousData;
        }
        private object get_56_QueryResult_stringSummODN(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringSummODN;
        }
        private object get_57_QueryResult_stringFullSumm(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringFullSumm;
        }
        private object get_58_QueryResult_stringDetailSumm(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringDetailSumm;
        }
        private object get_59_QueryResult_stringDate(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringDate;
        }
        private object get_60_QueryResult_stringData(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringData;
        }
        private object get_61_QueryResult_stringDataWithDelta(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringDataWithDelta;
        }
        private object get_62_QueryResult_TariffId(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.TariffId;
        }
        private void set_62_QueryResult_TariffId(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.TariffId = (global::System.Int32)Value;
        }
        private object get_63_QueryResult_TarifsCount(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.TarifsCount;
        }
        private void set_63_QueryResult_TarifsCount(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.TarifsCount = (global::System.Int32)Value;
        }
        private object get_64_QueryResult_Tarif1(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Tarif1;
        }
        private void set_64_QueryResult_Tarif1(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Tarif1 = (global::System.Double)Value;
        }
        private object get_65_QueryResult_Limit1(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Limit1;
        }
        private void set_65_QueryResult_Limit1(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Limit1 = (global::System.Double)Value;
        }
        private object get_66_QueryResult_Tarif2(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Tarif2;
        }
        private void set_66_QueryResult_Tarif2(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Tarif2 = (global::System.Double)Value;
        }
        private object get_67_QueryResult_Limit2(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Limit2;
        }
        private void set_67_QueryResult_Limit2(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Limit2 = (global::System.Double)Value;
        }
        private object get_68_QueryResult_Tarif3(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.Tarif3;
        }
        private void set_68_QueryResult_Tarif3(object instance, object Value)
        {
            var that = (global::Counters.QueryResult)instance;
            that.Tarif3 = (global::System.Double)Value;
        }
        private object get_69_QueryResult_stringTariff(object instance)
        {
            var that = (global::Counters.QueryResult)instance;
            return that.stringTariff;
        }
        private object get_70_List_Capacity(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.QueryResult>)instance;
            return that.Capacity;
        }
        private void set_70_List_Capacity(object instance, object Value)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.QueryResult>)instance;
            that.Capacity = (global::System.Int32)Value;
        }
        private object get_71_List_Count(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.QueryResult>)instance;
            return that.Count;
        }
        private object get_72_AddScore_CheckedServices(object instance)
        {
            var that = (global::Counters.AddScore)instance;
            return that.CheckedServices;
        }
        private object get_73_ServiceResult_ServiceId(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.ServiceId;
        }
        private void set_73_ServiceResult_ServiceId(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.ServiceId = (global::System.Int32)Value;
        }
        private object get_74_ServiceResult_Name(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Name;
        }
        private void set_74_ServiceResult_Name(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_75_ServiceResult_Data(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Data;
        }
        private void set_75_ServiceResult_Data(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.Data = (global::System.Double)Value;
        }
        private object get_76_ServiceResult_lstCounters(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.lstCounters;
        }
        private void set_76_ServiceResult_lstCounters(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.lstCounters = (global::System.String)Value;
        }
        private object get_77_ServiceResult_Type(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Type;
        }
        private void set_77_ServiceResult_Type(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.Type = (global::System.Int32)Value;
        }
        private object get_78_ServiceResult_Icon(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Icon;
        }
        private object get_79_ServiceResult_IconColor(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.IconColor;
        }
        private object get_80_ServiceResult_Summ(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Summ;
        }
        private object get_81_ServiceResult_stringSumm(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.stringSumm;
        }
        private object get_82_ServiceResult_ServiceDataId(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.ServiceDataId;
        }
        private void set_82_ServiceResult_ServiceDataId(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.ServiceDataId = (global::System.Int32)Value;
        }
        private object get_83_ServiceResult_ScoreId(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.ScoreId;
        }
        private void set_83_ServiceResult_ScoreId(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.ScoreId = (global::System.Int32)Value;
        }
        private object get_84_ServiceResult_TarifId(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.TarifId;
        }
        private void set_84_ServiceResult_TarifId(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.TarifId = (global::System.Int32)Value;
        }
        private object get_85_ServiceResult_Tarif(object instance)
        {
            var that = (global::Counters.ServiceResult)instance;
            return that.Tarif;
        }
        private void set_85_ServiceResult_Tarif(object instance, object Value)
        {
            var that = (global::Counters.ServiceResult)instance;
            that.Tarif = (global::System.Double)Value;
        }
        private object get_86_MenuItem_Description(object instance)
        {
            var that = (global::Counters.MenuItem)instance;
            return that.Description;
        }
        private void set_86_MenuItem_Description(object instance, object Value)
        {
            var that = (global::Counters.MenuItem)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_87_MenuItem_Title(object instance)
        {
            var that = (global::Counters.MenuItem)instance;
            return that.Title;
        }
        private void set_87_MenuItem_Title(object instance, object Value)
        {
            var that = (global::Counters.MenuItem)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_88_MenuItem_Type(object instance)
        {
            var that = (global::Counters.MenuItem)instance;
            return that.Type;
        }
        private void set_88_MenuItem_Type(object instance, object Value)
        {
            var that = (global::Counters.MenuItem)instance;
            that.Type = (global::System.Int32)Value;
        }
        private object get_89_List_Capacity(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MenuItem>)instance;
            return that.Capacity;
        }
        private void set_89_List_Capacity(object instance, object Value)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MenuItem>)instance;
            that.Capacity = (global::System.Int32)Value;
        }
        private object get_90_List_Count(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MenuItem>)instance;
            return that.Count;
        }
        private object get_91_MainMenuItem_ImgSource(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.ImgSource;
        }
        private void set_91_MainMenuItem_ImgSource(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.ImgSource = (global::System.String)Value;
        }
        private object get_92_MainMenuItem_Title(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.Title;
        }
        private void set_92_MainMenuItem_Title(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_93_MainMenuItem_Page(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.Page;
        }
        private void set_93_MainMenuItem_Page(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.Page = (global::System.String)Value;
        }
        private object get_94_MainMenuItem_Message(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.Message;
        }
        private void set_94_MainMenuItem_Message(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_95_MainMenuItem_Background(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.Background;
        }
        private void set_95_MainMenuItem_Background(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.Background = (global::System.String)Value;
        }
        private object get_96_MainMenuItem_IsLocked(object instance)
        {
            var that = (global::Counters.MainMenuItem)instance;
            return that.IsLocked;
        }
        private void set_96_MainMenuItem_IsLocked(object instance, object Value)
        {
            var that = (global::Counters.MainMenuItem)instance;
            that.IsLocked = (global::System.Boolean)Value;
        }
        private object get_97_List_Capacity(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MainMenuItem>)instance;
            return that.Capacity;
        }
        private void set_97_List_Capacity(object instance, object Value)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MainMenuItem>)instance;
            that.Capacity = (global::System.Int32)Value;
        }
        private object get_98_List_Count(object instance)
        {
            var that = (global::System.Collections.Generic.List<global::Counters.MainMenuItem>)instance;
            return that.Count;
        }
        private object get_99_DrawerLayout_IsDrawerVisible(object instance)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            return that.IsDrawerVisible;
        }
        private void set_99_DrawerLayout_IsDrawerVisible(object instance, object Value)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            that.IsDrawerVisible = (global::System.Boolean)Value;
        }
        private object get_100_DrawerLayout_IsDrawerOpen(object instance)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            return that.IsDrawerOpen;
        }
        private void set_100_DrawerLayout_IsDrawerOpen(object instance, object Value)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            that.IsDrawerOpen = (global::System.Boolean)Value;
        }
        private object get_101_MtFrame_ShowNavigationOnAppInAndOut(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.ShowNavigationOnAppInAndOut;
        }
        private void set_101_MtFrame_ShowNavigationOnAppInAndOut(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.ShowNavigationOnAppInAndOut = (global::System.Boolean)Value;
        }
        private object get_102_MtFrame_DisableForwardStack(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.DisableForwardStack;
        }
        private void set_102_MtFrame_DisableForwardStack(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.DisableForwardStack = (global::System.Boolean)Value;
        }
        private object get_103_MtFrame_DisableCache(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.DisableCache;
        }
        private void set_103_MtFrame_DisableCache(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.DisableCache = (global::System.Boolean)Value;
        }
        private object get_104_MtFrame_InternalFrame(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.InternalFrame;
        }
        private object get_105_MtFrame_Content(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.Content;
        }
        private void set_105_MtFrame_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_106_MtFrame_ContentTransitions(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.ContentTransitions;
        }
        private void set_106_MtFrame_ContentTransitions(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.ContentTransitions = (global::Windows.UI.Xaml.Media.Animation.TransitionCollection)Value;
        }
        private object get_107_MtFrame_GoBackCommand(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.GoBackCommand;
        }
        private object get_108_MtFrame_IsFirstPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.IsFirstPage;
        }
        private object get_109_MtFrame_PreviousPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.PreviousPage;
        }
        private object get_110_MtFrame_CurrentPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CurrentPage;
        }
        private object get_111_MtFrame_NextPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.NextPage;
        }
        private object get_112_MtFrame_CanGoBack(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CanGoBack;
        }
        private object get_113_MtFrame_CanGoForward(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CanGoForward;
        }
        private object get_114_MtFrame_Pages(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.Pages;
        }
        private object get_115_MtFrame_BackStackDepth(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.BackStackDepth;
        }
        private object get_116_MtFrame_PageAnimation(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.PageAnimation;
        }
        private void set_116_MtFrame_PageAnimation(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.PageAnimation = (global::MyToolkit.Paging.Animations.IPageAnimation)Value;
        }
        private object get_117_MtFrame_IsNavigating(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.IsNavigating;
        }
        private object get_118_PlotView_Controller(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.Controller;
        }
        private void set_118_PlotView_Controller(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.Controller = (global::OxyPlot.IPlotController)Value;
        }
        private object get_119_PlotView_DefaultTrackerTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.DefaultTrackerTemplate;
        }
        private void set_119_PlotView_DefaultTrackerTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.DefaultTrackerTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_120_PlotView_HandleRightClicks(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.HandleRightClicks;
        }
        private void set_120_PlotView_HandleRightClicks(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.HandleRightClicks = (global::System.Boolean)Value;
        }
        private object get_121_PlotView_IsMouseWheelEnabled(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.IsMouseWheelEnabled;
        }
        private void set_121_PlotView_IsMouseWheelEnabled(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.IsMouseWheelEnabled = (global::System.Boolean)Value;
        }
        private object get_122_PlotView_Model(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.Model;
        }
        private void set_122_PlotView_Model(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.Model = (global::OxyPlot.PlotModel)Value;
        }
        private object get_123_PlotView_ZoomRectangleTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ZoomRectangleTemplate;
        }
        private void set_123_PlotView_ZoomRectangleTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            that.ZoomRectangleTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_124_PlotView_TrackerDefinitions(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.TrackerDefinitions;
        }
        private object get_125_TrackerDefinition_TrackerKey(object instance)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            return that.TrackerKey;
        }
        private void set_125_TrackerDefinition_TrackerKey(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            that.TrackerKey = (global::System.String)Value;
        }
        private object get_126_TrackerDefinition_TrackerTemplate(object instance)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            return that.TrackerTemplate;
        }
        private void set_126_TrackerDefinition_TrackerTemplate(object instance, object Value)
        {
            var that = (global::OxyPlot.Windows.TrackerDefinition)instance;
            that.TrackerTemplate = (global::Windows.UI.Xaml.Controls.ControlTemplate)Value;
        }
        private object get_127_PlotView_ActualModel(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ActualModel;
        }
        private object get_128_PlotView_ClientArea(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ClientArea;
        }
        private object get_129_PlotView_ActualController(object instance)
        {
            var that = (global::OxyPlot.Windows.PlotView)instance;
            return that.ActualController;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Counters.Counters8_1_XamlTypeInfo.XamlMember xamlMember = null;
            global::Counters.Counters8_1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyToolkit.Paging.MtPage.BottomAppBar":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "BottomAppBar", "Windows.UI.Xaml.Controls.AppBar");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MtPage_BottomAppBar;
                xamlMember.Setter = set_0_MtPage_BottomAppBar;
                break;
            case "MyToolkit.Paging.MtPage.PageAnimation":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "PageAnimation", "MyToolkit.Paging.Animations.IPageAnimation");
                xamlMember.Getter = get_1_MtPage_PageAnimation;
                xamlMember.Setter = set_1_MtPage_PageAnimation;
                break;
            case "MyToolkit.Paging.MtPage.Frame":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Frame", "MyToolkit.Paging.MtFrame");
                xamlMember.Getter = get_2_MtPage_Frame;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtPage.AnimationContext":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AnimationContext", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_3_MtPage_AnimationContext;
                xamlMember.Setter = set_3_MtPage_AnimationContext;
                break;
            case "MyToolkit.Paging.MtPage.ActualAnimationContext":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ActualAnimationContext", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_4_MtPage_ActualAnimationContext;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtPage.InternalPage":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "InternalPage", "Windows.UI.Xaml.Controls.Page");
                xamlMember.Getter = get_5_MtPage_InternalPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtPage.NavigationCacheMode":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "NavigationCacheMode", "Windows.UI.Xaml.Navigation.NavigationCacheMode");
                xamlMember.Getter = get_6_MtPage_NavigationCacheMode;
                xamlMember.Setter = set_6_MtPage_NavigationCacheMode;
                break;
            case "MyToolkit.Paging.MtPage.TopAppBar":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TopAppBar", "Windows.UI.Xaml.Controls.AppBar");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_MtPage_TopAppBar;
                xamlMember.Setter = set_7_MtPage_TopAppBar;
                break;
            case "MyToolkit.Paging.MtPage.IsSuspendable":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsSuspendable", "Boolean");
                xamlMember.Getter = get_8_MtPage_IsSuspendable;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtPage.UsePointerButtonsToNavigate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "UsePointerButtonsToNavigate", "Boolean");
                xamlMember.Getter = get_9_MtPage_UsePointerButtonsToNavigate;
                xamlMember.Setter = set_9_MtPage_UsePointerButtonsToNavigate;
                break;
            case "MyToolkit.Paging.MtPage.UseAltLeftOrRightToNavigate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "UseAltLeftOrRightToNavigate", "Boolean");
                xamlMember.Getter = get_10_MtPage_UseAltLeftOrRightToNavigate;
                xamlMember.Setter = set_10_MtPage_UseAltLeftOrRightToNavigate;
                break;
            case "MyToolkit.Paging.MtPage.UseBackKeyToNavigate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "UseBackKeyToNavigate", "Boolean");
                xamlMember.Getter = get_11_MtPage_UseBackKeyToNavigate;
                xamlMember.Setter = set_11_MtPage_UseBackKeyToNavigate;
                break;
            case "MyToolkit.Paging.MtPage.UseBackKeyToNavigateInWebView":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtPage");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "UseBackKeyToNavigateInWebView", "Boolean");
                xamlMember.Getter = get_12_MtPage_UseBackKeyToNavigateInWebView;
                xamlMember.Setter = set_12_MtPage_UseBackKeyToNavigateInWebView;
                break;
            case "Counters.AppSettings.isFirstLaunchSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "isFirstLaunchSetting", "Boolean");
                xamlMember.Getter = get_13_AppSettings_isFirstLaunchSetting;
                xamlMember.Setter = set_13_AppSettings_isFirstLaunchSetting;
                break;
            case "Counters.AppSettings.Runs":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Runs", "Int32");
                xamlMember.Getter = get_14_AppSettings_Runs;
                xamlMember.Setter = set_14_AppSettings_Runs;
                break;
            case "Counters.AppSettings.NotRated":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "NotRated", "Boolean");
                xamlMember.Getter = get_15_AppSettings_NotRated;
                xamlMember.Setter = set_15_AppSettings_NotRated;
                break;
            case "Counters.AppSettings.IsFullVersion":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsFullVersion", "Boolean");
                xamlMember.Getter = get_16_AppSettings_IsFullVersion;
                xamlMember.Setter = set_16_AppSettings_IsFullVersion;
                break;
            case "Counters.AppSettings.Currency":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Currency", "String");
                xamlMember.Getter = get_17_AppSettings_Currency;
                xamlMember.Setter = set_17_AppSettings_Currency;
                break;
            case "Counters.AppSettings.AllowOrientation":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AllowOrientation", "Boolean");
                xamlMember.Getter = get_18_AppSettings_AllowOrientation;
                xamlMember.Setter = set_18_AppSettings_AllowOrientation;
                break;
            case "Counters.AppSettings.isRememberOn":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "isRememberOn", "Boolean");
                xamlMember.Getter = get_19_AppSettings_isRememberOn;
                xamlMember.Setter = set_19_AppSettings_isRememberOn;
                break;
            case "Counters.AppSettings.DefaultPageType":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DefaultPageType", "String");
                xamlMember.Getter = get_20_AppSettings_DefaultPageType;
                xamlMember.Setter = set_20_AppSettings_DefaultPageType;
                break;
            case "Counters.AppSettings.isFirstMessageSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "isFirstMessageSetting", "Boolean");
                xamlMember.Getter = get_21_AppSettings_isFirstMessageSetting;
                xamlMember.Setter = set_21_AppSettings_isFirstMessageSetting;
                break;
            case "Counters.AppSettings.emailSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "emailSetting", "String");
                xamlMember.Getter = get_22_AppSettings_emailSetting;
                xamlMember.Setter = set_22_AppSettings_emailSetting;
                break;
            case "Counters.AppSettings.mailTitleSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "mailTitleSetting", "String");
                xamlMember.Getter = get_23_AppSettings_mailTitleSetting;
                xamlMember.Setter = set_23_AppSettings_mailTitleSetting;
                break;
            case "Counters.AppSettings.phoneSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "phoneSetting", "String");
                xamlMember.Getter = get_24_AppSettings_phoneSetting;
                xamlMember.Setter = set_24_AppSettings_phoneSetting;
                break;
            case "Counters.AppSettings.AddData":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AddData", "Boolean");
                xamlMember.Getter = get_25_AppSettings_AddData;
                xamlMember.Setter = set_25_AppSettings_AddData;
                break;
            case "Counters.AppSettings.AddSumm":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AddSumm", "Boolean");
                xamlMember.Getter = get_26_AppSettings_AddSumm;
                xamlMember.Setter = set_26_AppSettings_AddSumm;
                break;
            case "Counters.AppSettings.AddServices":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AddServices", "Boolean");
                xamlMember.Getter = get_27_AppSettings_AddServices;
                xamlMember.Setter = set_27_AppSettings_AddServices;
                break;
            case "Counters.AppSettings.dbVersionSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "dbVersionSetting", "String");
                xamlMember.Getter = get_28_AppSettings_dbVersionSetting;
                xamlMember.Setter = set_28_AppSettings_dbVersionSetting;
                break;
            case "Counters.AppSettings.LastBackupDate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "LastBackupDate", "String");
                xamlMember.Getter = get_29_AppSettings_LastBackupDate;
                xamlMember.Setter = set_29_AppSettings_LastBackupDate;
                break;
            case "Counters.AppSettings.SaveBackupOnExit":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "SaveBackupOnExit", "Boolean");
                xamlMember.Getter = get_30_AppSettings_SaveBackupOnExit;
                xamlMember.Setter = set_30_AppSettings_SaveBackupOnExit;
                break;
            case "Counters.AppSettings.NeedToSaveBackup":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "NeedToSaveBackup", "Boolean");
                xamlMember.Getter = get_31_AppSettings_NeedToSaveBackup;
                xamlMember.Setter = set_31_AppSettings_NeedToSaveBackup;
                break;
            case "Counters.AppSettings.notificationCountSetting":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "notificationCountSetting", "Int32");
                xamlMember.Getter = get_32_AppSettings_notificationCountSetting;
                xamlMember.Setter = set_32_AppSettings_notificationCountSetting;
                break;
            case "Counters.AppSettings.PlotType":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "PlotType", "Int32");
                xamlMember.Getter = get_33_AppSettings_PlotType;
                xamlMember.Setter = set_33_AppSettings_PlotType;
                break;
            case "Counters.AppSettings.CurrentFlatId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CurrentFlatId", "Int32");
                xamlMember.Getter = get_34_AppSettings_CurrentFlatId;
                xamlMember.Setter = set_34_AppSettings_CurrentFlatId;
                break;
            case "Counters.AppSettings.AppVersion":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AppSettings");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "AppVersion", "Int32");
                xamlMember.Getter = get_35_AppSettings_AppVersion;
                xamlMember.Setter = set_35_AppSettings_AppVersion;
                break;
            case "Counters.QueryResult.TypeId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TypeId", "Int32");
                xamlMember.Getter = get_36_QueryResult_TypeId;
                xamlMember.Setter = set_36_QueryResult_TypeId;
                break;
            case "Counters.QueryResult.CounterId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CounterId", "Int32");
                xamlMember.Getter = get_37_QueryResult_CounterId;
                xamlMember.Setter = set_37_QueryResult_CounterId;
                break;
            case "Counters.QueryResult.Name":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_38_QueryResult_Name;
                xamlMember.Setter = set_38_QueryResult_Name;
                break;
            case "Counters.QueryResult.EnableODN":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "EnableODN", "Boolean");
                xamlMember.Getter = get_39_QueryResult_EnableODN;
                xamlMember.Setter = set_39_QueryResult_EnableODN;
                break;
            case "Counters.QueryResult.CounterType":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CounterType", "String");
                xamlMember.Getter = get_40_QueryResult_CounterType;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.Icon":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Icon", "String");
                xamlMember.Getter = get_41_QueryResult_Icon;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.IconColor":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IconColor", "String");
                xamlMember.Getter = get_42_QueryResult_IconColor;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.Unit":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Unit", "String");
                xamlMember.Getter = get_43_QueryResult_Unit;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.DataId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DataId", "Int32");
                xamlMember.Getter = get_44_QueryResult_DataId;
                xamlMember.Setter = set_44_QueryResult_DataId;
                break;
            case "Counters.QueryResult.NextDataId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "NextDataId", "Int32");
                xamlMember.Getter = get_45_QueryResult_NextDataId;
                xamlMember.Setter = set_45_QueryResult_NextDataId;
                break;
            case "Counters.QueryResult.Data":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Data", "Double");
                xamlMember.Getter = get_46_QueryResult_Data;
                xamlMember.Setter = set_46_QueryResult_Data;
                break;
            case "Counters.QueryResult.DataODN":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DataODN", "Double");
                xamlMember.Getter = get_47_QueryResult_DataODN;
                xamlMember.Setter = set_47_QueryResult_DataODN;
                break;
            case "Counters.QueryResult.Date":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_48_QueryResult_Date;
                xamlMember.Setter = set_48_QueryResult_Date;
                break;
            case "Counters.QueryResult.SummODN":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "SummODN", "Double");
                xamlMember.Getter = get_49_QueryResult_SummODN;
                xamlMember.Setter = set_49_QueryResult_SummODN;
                break;
            case "Counters.QueryResult.stringSumm":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringSumm", "String");
                xamlMember.Getter = get_50_QueryResult_stringSumm;
                xamlMember.Setter = set_50_QueryResult_stringSumm;
                break;
            case "Counters.QueryResult.ScoreId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ScoreId", "Int32");
                xamlMember.Getter = get_51_QueryResult_ScoreId;
                xamlMember.Setter = set_51_QueryResult_ScoreId;
                break;
            case "Counters.QueryResult.IsFirst":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsFirst", "Boolean");
                xamlMember.Getter = get_52_QueryResult_IsFirst;
                xamlMember.Setter = set_52_QueryResult_IsFirst;
                break;
            case "Counters.QueryResult.Delta":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Delta", "Double");
                xamlMember.Getter = get_53_QueryResult_Delta;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.Summ":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Summ", "Double");
                xamlMember.Getter = get_54_QueryResult_Summ;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.PreviousData":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "PreviousData", "Counters.QueryResult");
                xamlMember.Getter = get_55_QueryResult_PreviousData;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringSummODN":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringSummODN", "String");
                xamlMember.Getter = get_56_QueryResult_stringSummODN;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringFullSumm":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringFullSumm", "String");
                xamlMember.Getter = get_57_QueryResult_stringFullSumm;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringDetailSumm":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringDetailSumm", "String");
                xamlMember.Getter = get_58_QueryResult_stringDetailSumm;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringDate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringDate", "String");
                xamlMember.Getter = get_59_QueryResult_stringDate;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringData":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringData", "String");
                xamlMember.Getter = get_60_QueryResult_stringData;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.stringDataWithDelta":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringDataWithDelta", "String");
                xamlMember.Getter = get_61_QueryResult_stringDataWithDelta;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.QueryResult.TariffId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TariffId", "Int32");
                xamlMember.Getter = get_62_QueryResult_TariffId;
                xamlMember.Setter = set_62_QueryResult_TariffId;
                break;
            case "Counters.QueryResult.TarifsCount":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TarifsCount", "Int32");
                xamlMember.Getter = get_63_QueryResult_TarifsCount;
                xamlMember.Setter = set_63_QueryResult_TarifsCount;
                break;
            case "Counters.QueryResult.Tarif1":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Tarif1", "Double");
                xamlMember.Getter = get_64_QueryResult_Tarif1;
                xamlMember.Setter = set_64_QueryResult_Tarif1;
                break;
            case "Counters.QueryResult.Limit1":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Limit1", "Double");
                xamlMember.Getter = get_65_QueryResult_Limit1;
                xamlMember.Setter = set_65_QueryResult_Limit1;
                break;
            case "Counters.QueryResult.Tarif2":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Tarif2", "Double");
                xamlMember.Getter = get_66_QueryResult_Tarif2;
                xamlMember.Setter = set_66_QueryResult_Tarif2;
                break;
            case "Counters.QueryResult.Limit2":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Limit2", "Double");
                xamlMember.Getter = get_67_QueryResult_Limit2;
                xamlMember.Setter = set_67_QueryResult_Limit2;
                break;
            case "Counters.QueryResult.Tarif3":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Tarif3", "Double");
                xamlMember.Getter = get_68_QueryResult_Tarif3;
                xamlMember.Setter = set_68_QueryResult_Tarif3;
                break;
            case "Counters.QueryResult.stringTariff":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.QueryResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringTariff", "String");
                xamlMember.Getter = get_69_QueryResult_stringTariff;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Collections.Generic.List`1<Counters.QueryResult>.Capacity":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.QueryResult>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Capacity", "Int32");
                xamlMember.Getter = get_70_List_Capacity;
                xamlMember.Setter = set_70_List_Capacity;
                break;
            case "System.Collections.Generic.List`1<Counters.QueryResult>.Count":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.QueryResult>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_71_List_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.AddScore.CheckedServices":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.AddScore");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CheckedServices", "System.Collections.Generic.List`1<Counters.ServiceResult>");
                xamlMember.Getter = get_72_AddScore_CheckedServices;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.ServiceResult.ServiceId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ServiceId", "Int32");
                xamlMember.Getter = get_73_ServiceResult_ServiceId;
                xamlMember.Setter = set_73_ServiceResult_ServiceId;
                break;
            case "Counters.ServiceResult.Name":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_74_ServiceResult_Name;
                xamlMember.Setter = set_74_ServiceResult_Name;
                break;
            case "Counters.ServiceResult.Data":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Data", "Double");
                xamlMember.Getter = get_75_ServiceResult_Data;
                xamlMember.Setter = set_75_ServiceResult_Data;
                break;
            case "Counters.ServiceResult.lstCounters":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "lstCounters", "String");
                xamlMember.Getter = get_76_ServiceResult_lstCounters;
                xamlMember.Setter = set_76_ServiceResult_lstCounters;
                break;
            case "Counters.ServiceResult.Type":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Type", "Int32");
                xamlMember.Getter = get_77_ServiceResult_Type;
                xamlMember.Setter = set_77_ServiceResult_Type;
                break;
            case "Counters.ServiceResult.Icon":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Icon", "String");
                xamlMember.Getter = get_78_ServiceResult_Icon;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.ServiceResult.IconColor":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IconColor", "String");
                xamlMember.Getter = get_79_ServiceResult_IconColor;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.ServiceResult.Summ":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Summ", "Double");
                xamlMember.Getter = get_80_ServiceResult_Summ;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.ServiceResult.stringSumm":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "stringSumm", "String");
                xamlMember.Getter = get_81_ServiceResult_stringSumm;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.ServiceResult.ServiceDataId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ServiceDataId", "Int32");
                xamlMember.Getter = get_82_ServiceResult_ServiceDataId;
                xamlMember.Setter = set_82_ServiceResult_ServiceDataId;
                break;
            case "Counters.ServiceResult.ScoreId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ScoreId", "Int32");
                xamlMember.Getter = get_83_ServiceResult_ScoreId;
                xamlMember.Setter = set_83_ServiceResult_ScoreId;
                break;
            case "Counters.ServiceResult.TarifId":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TarifId", "Int32");
                xamlMember.Getter = get_84_ServiceResult_TarifId;
                xamlMember.Setter = set_84_ServiceResult_TarifId;
                break;
            case "Counters.ServiceResult.Tarif":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.ServiceResult");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Tarif", "Double");
                xamlMember.Getter = get_85_ServiceResult_Tarif;
                xamlMember.Setter = set_85_ServiceResult_Tarif;
                break;
            case "Counters.MenuItem.Description":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_86_MenuItem_Description;
                xamlMember.Setter = set_86_MenuItem_Description;
                break;
            case "Counters.MenuItem.Title":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_87_MenuItem_Title;
                xamlMember.Setter = set_87_MenuItem_Title;
                break;
            case "Counters.MenuItem.Type":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Type", "Int32");
                xamlMember.Getter = get_88_MenuItem_Type;
                xamlMember.Setter = set_88_MenuItem_Type;
                break;
            case "System.Collections.Generic.List`1<Counters.MenuItem>.Capacity":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MenuItem>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Capacity", "Int32");
                xamlMember.Getter = get_89_List_Capacity;
                xamlMember.Setter = set_89_List_Capacity;
                break;
            case "System.Collections.Generic.List`1<Counters.MenuItem>.Count":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MenuItem>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_90_List_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Counters.MainMenuItem.ImgSource":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ImgSource", "String");
                xamlMember.Getter = get_91_MainMenuItem_ImgSource;
                xamlMember.Setter = set_91_MainMenuItem_ImgSource;
                break;
            case "Counters.MainMenuItem.Title":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_92_MainMenuItem_Title;
                xamlMember.Setter = set_92_MainMenuItem_Title;
                break;
            case "Counters.MainMenuItem.Page":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Page", "String");
                xamlMember.Getter = get_93_MainMenuItem_Page;
                xamlMember.Setter = set_93_MainMenuItem_Page;
                break;
            case "Counters.MainMenuItem.Message":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.Getter = get_94_MainMenuItem_Message;
                xamlMember.Setter = set_94_MainMenuItem_Message;
                break;
            case "Counters.MainMenuItem.Background":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Background", "String");
                xamlMember.Getter = get_95_MainMenuItem_Background;
                xamlMember.Setter = set_95_MainMenuItem_Background;
                break;
            case "Counters.MainMenuItem.IsLocked":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Counters.MainMenuItem");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsLocked", "Boolean");
                xamlMember.Getter = get_96_MainMenuItem_IsLocked;
                xamlMember.Setter = set_96_MainMenuItem_IsLocked;
                break;
            case "System.Collections.Generic.List`1<Counters.MainMenuItem>.Capacity":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MainMenuItem>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Capacity", "Int32");
                xamlMember.Getter = get_97_List_Capacity;
                xamlMember.Setter = set_97_List_Capacity;
                break;
            case "System.Collections.Generic.List`1<Counters.MainMenuItem>.Count":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.Generic.List`1<Counters.MainMenuItem>");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_98_List_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "DrawerLayout.DrawerLayout.IsDrawerVisible":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrawerLayout.DrawerLayout");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsDrawerVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_DrawerLayout_IsDrawerVisible;
                xamlMember.Setter = set_99_DrawerLayout_IsDrawerVisible;
                break;
            case "DrawerLayout.DrawerLayout.IsDrawerOpen":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrawerLayout.DrawerLayout");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsDrawerOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_DrawerLayout_IsDrawerOpen;
                xamlMember.Setter = set_100_DrawerLayout_IsDrawerOpen;
                break;
            case "MyToolkit.Paging.MtFrame.ShowNavigationOnAppInAndOut":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ShowNavigationOnAppInAndOut", "Boolean");
                xamlMember.Getter = get_101_MtFrame_ShowNavigationOnAppInAndOut;
                xamlMember.Setter = set_101_MtFrame_ShowNavigationOnAppInAndOut;
                break;
            case "MyToolkit.Paging.MtFrame.DisableForwardStack":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DisableForwardStack", "Boolean");
                xamlMember.Getter = get_102_MtFrame_DisableForwardStack;
                xamlMember.Setter = set_102_MtFrame_DisableForwardStack;
                break;
            case "MyToolkit.Paging.MtFrame.DisableCache":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DisableCache", "Boolean");
                xamlMember.Getter = get_103_MtFrame_DisableCache;
                xamlMember.Setter = set_103_MtFrame_DisableCache;
                break;
            case "MyToolkit.Paging.MtFrame.InternalFrame":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "InternalFrame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.Getter = get_104_MtFrame_InternalFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.Content":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_MtFrame_Content;
                xamlMember.Setter = set_105_MtFrame_Content;
                break;
            case "MyToolkit.Paging.MtFrame.ContentTransitions":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ContentTransitions", "Windows.UI.Xaml.Media.Animation.TransitionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_MtFrame_ContentTransitions;
                xamlMember.Setter = set_106_MtFrame_ContentTransitions;
                break;
            case "MyToolkit.Paging.MtFrame.GoBackCommand":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "GoBackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_107_MtFrame_GoBackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.IsFirstPage":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsFirstPage", "Boolean");
                xamlMember.Getter = get_108_MtFrame_IsFirstPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.PreviousPage":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "PreviousPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_109_MtFrame_PreviousPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CurrentPage":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CurrentPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_110_MtFrame_CurrentPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.NextPage":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "NextPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_111_MtFrame_NextPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CanGoBack":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.Getter = get_112_MtFrame_CanGoBack;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CanGoForward":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.Getter = get_113_MtFrame_CanGoForward;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.Pages":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Pages", "System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>");
                xamlMember.Getter = get_114_MtFrame_Pages;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.BackStackDepth":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "BackStackDepth", "Int32");
                xamlMember.Getter = get_115_MtFrame_BackStackDepth;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.PageAnimation":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "PageAnimation", "MyToolkit.Paging.Animations.IPageAnimation");
                xamlMember.Getter = get_116_MtFrame_PageAnimation;
                xamlMember.Setter = set_116_MtFrame_PageAnimation;
                break;
            case "MyToolkit.Paging.MtFrame.IsNavigating":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_117_MtFrame_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.PlotView.Controller":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Controller", "OxyPlot.IPlotController");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_PlotView_Controller;
                xamlMember.Setter = set_118_PlotView_Controller;
                break;
            case "OxyPlot.Windows.PlotView.DefaultTrackerTemplate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "DefaultTrackerTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_PlotView_DefaultTrackerTemplate;
                xamlMember.Setter = set_119_PlotView_DefaultTrackerTemplate;
                break;
            case "OxyPlot.Windows.PlotView.HandleRightClicks":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "HandleRightClicks", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_PlotView_HandleRightClicks;
                xamlMember.Setter = set_120_PlotView_HandleRightClicks;
                break;
            case "OxyPlot.Windows.PlotView.IsMouseWheelEnabled":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "IsMouseWheelEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_PlotView_IsMouseWheelEnabled;
                xamlMember.Setter = set_121_PlotView_IsMouseWheelEnabled;
                break;
            case "OxyPlot.Windows.PlotView.Model":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "Model", "OxyPlot.PlotModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_PlotView_Model;
                xamlMember.Setter = set_122_PlotView_Model;
                break;
            case "OxyPlot.Windows.PlotView.ZoomRectangleTemplate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ZoomRectangleTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_PlotView_ZoomRectangleTemplate;
                xamlMember.Setter = set_123_PlotView_ZoomRectangleTemplate;
                break;
            case "OxyPlot.Windows.PlotView.TrackerDefinitions":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TrackerDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<OxyPlot.Windows.TrackerDefinition>");
                xamlMember.Getter = get_124_PlotView_TrackerDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.TrackerDefinition.TrackerKey":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.TrackerDefinition");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TrackerKey", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_TrackerDefinition_TrackerKey;
                xamlMember.Setter = set_125_TrackerDefinition_TrackerKey;
                break;
            case "OxyPlot.Windows.TrackerDefinition.TrackerTemplate":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.TrackerDefinition");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "TrackerTemplate", "Windows.UI.Xaml.Controls.ControlTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_TrackerDefinition_TrackerTemplate;
                xamlMember.Setter = set_126_TrackerDefinition_TrackerTemplate;
                break;
            case "OxyPlot.Windows.PlotView.ActualModel":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ActualModel", "OxyPlot.PlotModel");
                xamlMember.Getter = get_127_PlotView_ActualModel;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.PlotView.ClientArea":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ClientArea", "OxyPlot.OxyRect");
                xamlMember.Getter = get_128_PlotView_ClientArea;
                xamlMember.SetIsReadOnly();
                break;
            case "OxyPlot.Windows.PlotView.ActualController":
                userType = (global::Counters.Counters8_1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OxyPlot.Windows.PlotView");
                xamlMember = new global::Counters.Counters8_1_XamlTypeInfo.XamlMember(this, "ActualController", "OxyPlot.IPlotController");
                xamlMember.Getter = get_129_PlotView_ActualController;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Counters.Counters8_1_XamlTypeInfo.XamlSystemBaseType
    {
        global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Counters.Counters8_1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


